datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

generator db {
    provider = "go run github.com/steebchen/prisma-client-go"
}

enum role {
    owner
    tenant
}

enum priority {
    low
    medium
    high
    urgent
}

enum roomType {
    dressing
    laundryroom
    bedroom
    playroom
    bathroom
    toilet
    livingroom
    diningroom
    kitchen
    hallway
    balcony
    cellar
    garage
    storage
    office
    other
}

enum reportType {
    start
    middle
    end
}

enum state {
    broken
    needsRepair
    bad
    medium
    good
    new
}

enum cleanliness {
    dirty
    medium
    clean
}

model user {
    id          String   @id @default(cuid())
    email       String   @unique @db.VarChar(255)
    password    String
    firstname   String
    lastname    String
    role        role
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    profile_picture    String?
    owned_properties   property[]
    rented_properties  lease[]
}

model lease {
    id          String    @id @default(cuid())
    active      Boolean   @default(true)
    start_date  DateTime
    end_date    DateTime?
    created_at  DateTime  @default(now())

    tenant      user      @relation(fields: [tenant_id], references: [id])
    tenant_id   String
    property    property  @relation(fields: [property_id], references: [id])
    property_id String

    documents   String[]
    damages     damage[]
    reports     inventoryReport[]
}

model damage {
    id          String   @id @default(cuid())
    comment     String
    priority    priority
    read        Boolean  @default(false)

    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt
    fix_planned_at DateTime?
    fixed_at       DateTime?
    fixed_owner    Boolean  @default(false)
    fixed_tenant   Boolean  @default(false)

    lease       lease   @relation(fields: [lease_id], references: [id])
    lease_id    String
    room        room    @relation(fields: [room_id], references: [id], onDelete: Cascade)
    room_id     String

    pictures    String[]

    @@index([lease_id])
    @@index([fixed_at])
}

model property {
    id               String   @id @default(cuid())
    name             String
    address          String
    apartment_number String?
    city             String
    postal_code      String
    country          String
    area_sqm               Float
    rental_price_per_month Float
    deposit_price          Float
    created_at  DateTime @default(now())
    archived    Boolean  @default(false)

    picture    String?

    owner       user     @relation(fields: [owner_id], references: [id])
    owner_id    String

    leases        lease[]
    lease_invite  leaseInvite?
    rooms         room[]

    @@unique([name, owner_id])
}

model leaseInvite {
    id           String    @id @default(cuid())
    tenant_email String    @unique @db.VarChar(255)

    start_date   DateTime
    end_date     DateTime?
    created_at   DateTime  @default(now())

    property     property  @relation(fields: [property_id], references: [id])
    property_id  String    @unique
}

model room {
    id          String   @id @default(cuid())
    name        String
    type        roomType
    archived    Boolean  @default(false)

    property    property @relation(fields: [property_id], references: [id], onDelete: Cascade)
    property_id String

    furnitures  furniture[]
    roomStates  roomState[]
    damages     damage[]

    @@unique([name, property_id])
}

model furniture {
    id        String @id @default(cuid())
    name      String
    quantity  Int    @default(1)
    archived  Boolean  @default(false)

    room      room   @relation(fields: [room_id], references: [id], onDelete: Cascade)
    room_id   String

    furnitureStates furnitureState[]

    @@unique([name, room_id])
}

model inventoryReport {
    id        String     @id @default(cuid())
    date      DateTime   @default(now())
    type      reportType
    submitted Boolean   @default(false)

    lease    lease  @relation(fields: [lease_id], references: [id])
    lease_id String

    roomStates      roomState[]
    furnitureStates furnitureState[]
}

model roomState {
    id          String        @id @default(cuid())
    cleanliness cleanliness
    state       state
    note        String

    report    inventoryReport @relation(fields: [report_id], references: [id], onDelete: Cascade)
    report_id String
    room      room            @relation(fields: [room_id], references: [id], onDelete: Cascade)
    room_id   String

    pictures String[]

    @@unique([report_id, room_id])
}

model furnitureState {
    id          String             @id @default(cuid())
    cleanliness cleanliness
    state       state
    note        String

    report         inventoryReport @relation(fields: [report_id], references: [id], onDelete: Cascade)
    report_id      String
    furniture      furniture       @relation(fields: [furniture_id], references: [id], onDelete: Cascade)
    furniture_id   String

    pictures String[]

    @@unique([report_id, furniture_id])
}
