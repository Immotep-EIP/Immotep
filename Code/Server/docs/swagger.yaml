basePath: /api/v1
definitions:
  db.Role:
    enum:
    - owner
    - tenant
    type: string
    x-enum-varnames:
    - RoleOwner
    - RoleTenant
  models.ImageRequest:
    properties:
      data:
        type: string
    required:
    - data
    type: object
  models.InviteRequest:
    properties:
      end_date:
        type: string
      start_date:
        type: string
      tenant_email:
        type: string
    required:
    - start_date
    - tenant_email
    type: object
  models.InviteResponse:
    properties:
      created_at:
        type: string
      end_date:
        type: string
      id:
        type: string
      property_id:
        type: string
      start_date:
        type: string
      tenant_email:
        type: string
    type: object
  models.PropertyRequest:
    properties:
      address:
        type: string
      area_sqm:
        type: number
      city:
        type: string
      country:
        type: string
      deposit_price:
        type: integer
      name:
        type: string
      postal_code:
        type: string
      rental_price_per_month:
        type: integer
    required:
    - address
    - area_sqm
    - city
    - country
    - deposit_price
    - name
    - postal_code
    - rental_price_per_month
    type: object
  models.PropertyResponse:
    properties:
      address:
        type: string
      area_sqm:
        type: number
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      deposit_price:
        type: integer
      end_date:
        type: string
      id:
        type: string
      name:
        type: string
      nb_damage:
        type: integer
      owner_id:
        type: string
      picture_id:
        type: string
      postal_code:
        type: string
      rental_price_per_month:
        type: integer
      start_date:
        type: string
      status:
        description: calculated fields
        type: string
      tenant:
        type: string
    type: object
  models.UserRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
      role:
        $ref: '#/definitions/db.Role'
      updated_at:
        type: string
    type: object
  utils.Error:
    properties:
      code:
        $ref: '#/definitions/utils.ErrorCode'
      error:
        type: string
    type: object
  utils.ErrorCode:
    enum:
    - invalid-password
    - cannot-fetch-user
    - user-not-found
    - cannot-create-user
    - no-claims
    - cannot-decode-user
    - missing-fields
    - cannot-hash-password
    - email-already-exists
    - test-error
    - too-many-requests
    - invite-not-found
    - user-must-have-same-email-as-invite
    - invite-already-exists-for-email-or-property
    - contract-already-exists-for-tenant-and-property
    - property-not-found
    - property-is-not-yours
    - not-an-owner
    - not-a-tenant
    - property-already-exists
    - property-not-available
    - failed-to-link-image
    - bad-base64-string
    type: string
    x-enum-varnames:
    - InvalidPassword
    - CannotFetchUser
    - UserNotFound
    - CannotCreateUser
    - NoClaims
    - CannotDecodeUser
    - MissingFields
    - CannotHashPassword
    - EmailAlreadyExists
    - TestError
    - TooManyRequests
    - InviteNotFound
    - UserSameEmailAsInvite
    - InviteAlreadyExists
    - ContractAlreadyExist
    - PropertyNotFound
    - PropertyNotYours
    - NotAnOwner
    - NotATenant
    - PropertyAlreadyExists
    - PropertyNotAvailable
    - FailedLinkImage
    - BadBase64String
host: localhost:3001
info:
  contact:
    email: martin.d-herouville@epitech.eu
    name: Mazettt
  description: This is the API used by the Immotep application.
  termsOfService: http://swagger.io/terms/
  title: Immotep API
  version: "1.0"
paths:
  /auth/invite/{id}:
    post:
      consumes:
      - application/json
      description: Answer an invite from an owner with an invite link
      parameters:
      - description: Pending contract ID
        in: path
        name: id
        required: true
        type: string
      - description: Tenant user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created user data
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Missing fields
          schema:
            $ref: '#/definitions/utils.Error'
        "404":
          description: Pending contract not found
          schema:
            $ref: '#/definitions/utils.Error'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      summary: Create a new tenant
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user with owner role
      parameters:
      - description: Owner user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created user data
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Missing fields
          schema:
            $ref: '#/definitions/utils.Error'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      summary: Create a new owner
      tags:
      - auth
  /auth/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticate user with email and password
      parameters:
      - description: password / refresh_token
        in: formData
        name: grant_type
        required: true
        type: string
      - description: User email
        in: formData
        name: username
        type: string
      - description: User password
        in: formData
        name: password
        type: string
      - description: Refresh token
        in: formData
        name: refresh_token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token data
          schema: {}
        "400":
          description: Invalid grant_type
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
      summary: Authenticate user
      tags:
      - auth
  /owner/properties:
    get:
      consumes:
      - application/json
      description: Get all properties information of an owner
      produces:
      - application/json
      responses:
        "200":
          description: List of properties
          schema:
            items:
              $ref: '#/definitions/models.PropertyResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get all properties of an owner
      tags:
      - owner
    post:
      consumes:
      - application/json
      description: Create a new property for an owner
      parameters:
      - description: Property data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.PropertyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created property data
          schema:
            $ref: '#/definitions/models.PropertyResponse'
        "400":
          description: Missing fields
          schema:
            $ref: '#/definitions/utils.Error'
        "409":
          description: Property already exists
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      summary: Create a new property
      tags:
      - owner
  /owner/properties/{id}:
    get:
      consumes:
      - application/json
      description: Get property information by its ID
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Property data
          schema:
            $ref: '#/definitions/models.PropertyResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Error'
        "403":
          description: Property not yours
          schema:
            $ref: '#/definitions/utils.Error'
        "404":
          description: Property not found
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get property by ID
      tags:
      - owner
  /owner/properties/{id}/picture:
    put:
      consumes:
      - application/json
      description: Update property's image
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: string
      - description: Picture data as a Base64 string
        in: body
        name: picture
        required: true
        schema:
          $ref: '#/definitions/models.ImageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Updated property data
          schema:
            $ref: '#/definitions/models.PropertyResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Error'
        "403":
          description: Property not yours
          schema:
            $ref: '#/definitions/utils.Error'
        "404":
          description: Property not found
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      summary: Update property's image
      tags:
      - owner
  /owner/send-invite/{propertyId}:
    post:
      consumes:
      - application/json
      description: Invite tenant to owner's property
      parameters:
      - description: Property ID
        in: path
        name: propertyId
        required: true
        type: string
      - description: Invite params
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.InviteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created invite
          schema:
            $ref: '#/definitions/models.InviteResponse'
        "400":
          description: Missing fields
          schema:
            $ref: '#/definitions/utils.Error'
        "403":
          description: Property is not yours
          schema:
            $ref: '#/definitions/utils.Error'
        "404":
          description: Property not found
          schema:
            $ref: '#/definitions/utils.Error'
        "409":
          description: Invite already exists for this email
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Invite tenant to owner's property
      tags:
      - owner
  /profile:
    get:
      consumes:
      - application/json
      description: Get user profile information
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - user
  /users:
    get:
      description: Get all users information
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - user
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user information by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - user
securityDefinitions:
  Bearer:
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
