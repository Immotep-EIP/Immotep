basePath: /api/v1
definitions:
  db.Role:
    enum:
    - admin
    - member
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleMember
  models.UserRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
      role:
        $ref: '#/definitions/db.Role'
      updated_at:
        type: string
    type: object
  utils.Error:
    properties:
      code:
        $ref: '#/definitions/utils.ErrorCode'
      error:
        type: string
    type: object
  utils.ErrorCode:
    enum:
    - invalid-password
    - cannot-fetch-user
    - cannot-find-user
    - cannot-create-user
    - no-claims
    - cannot-decode-user
    - missing-fields
    - cannot-hash-password
    - email-already-exists
    - test-error
    type: string
    x-enum-varnames:
    - InvalidPassword
    - CannotFetchUser
    - CannotFindUser
    - CannotCreateUser
    - NoClaims
    - CannotDecodeUser
    - MissingFields
    - CannotHashPassword
    - EmailAlreadyExists
    - TestError
host: localhost:3001
info:
  contact:
    email: martin.d-herouville@epitech.eu
    name: Mazettt
  description: This is the API used by the Immotep application.
  termsOfService: http://swagger.io/terms/
  title: Immotep API
  version: "1.0"
paths:
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created user data
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Missing fields
          schema:
            $ref: '#/definitions/utils.Error'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      summary: Create a new user
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Get user profile information
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Error'
        "404":
          description: Cannot find user
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - users
  /users:
    get:
      description: Get all users information
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user information by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Error'
        "404":
          description: Cannot find user
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - users
securityDefinitions:
  Bearer:
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
