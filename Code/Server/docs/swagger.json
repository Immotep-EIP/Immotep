{
    "swagger": "2.0",
    "info": {
        "description": "This is the API used by the Immotep application.",
        "title": "Immotep API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Mazettt",
            "email": "martin.d-herouville@epitech.eu"
        },
        "version": "1.0"
    },
    "host": "localhost:3001",
    "basePath": "/api/v1",
    "paths": {
        "/auth/invite/{id}/": {
            "post": {
                "description": "Answer an invite from an owner with an invite link by creating a new user with tenant role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Create a new tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pending contract ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tenant user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created user data",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Pending contract not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/register/": {
            "post": {
                "description": "Create a new user with owner role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Create a new owner",
                "parameters": [
                    {
                        "description": "Owner user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created user data",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/token/": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "password / refresh_token",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "username",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "password",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "refresh_token",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token data",
                        "schema": {}
                    },
                    "400": {
                        "description": "Invalid grant_type",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all properties information of an owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get all properties of an owner",
                "responses": {
                    "200": {
                        "description": "List of properties",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PropertyResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new property for an owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Create a new property",
                "parameters": [
                    {
                        "description": "Property data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PropertyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created property data",
                        "schema": {
                            "$ref": "#/definitions/models.PropertyResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "409": {
                        "description": "Property already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get property information by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get property by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property data",
                        "schema": {
                            "$ref": "#/definitions/models.PropertyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update property information by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Update property by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property data",
                        "schema": {
                            "$ref": "#/definitions/models.PropertyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/archive": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Toggle archive status of a property by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Toggle archive property by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Archive status",
                        "name": "archive",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ArchiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Toggled archive property data",
                        "schema": {
                            "$ref": "#/definitions/models.PropertyResponse"
                        }
                    },
                    "400": {
                        "description": "Mising fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/cancel-invite": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Cancel pending contract invite",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Cancel invite",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invite canceled"
                    },
                    "403": {
                        "description": "Property is not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "No pending contract",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/documents/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all documents of a contract related to a property",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get property documents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of documents",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DocumentResponse"
                            }
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "No active contract",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/end-contract": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "End active contract for a property",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "End contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Contract ended"
                    },
                    "403": {
                        "description": "Property is not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "No active contract",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/inventory-reports/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all inventory reports for a property",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get all inventory reports for a property",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of inventory reports",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.InventoryReportResponse"
                            }
                        }
                    },
                    "403": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new inventory report for a room",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Create a new inventory report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Inventory report data",
                        "name": "invReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InventoryReportRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created inventory report data",
                        "schema": {
                            "$ref": "#/definitions/models.CreateInventoryReportResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property or room not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/inventory-reports/compare/{old_report_id}/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generate comparison from photo for last inventory report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Generate comparison from photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Previous report ID to compare with",
                        "name": "old_report_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Compare data",
                        "name": "aiData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SummarizeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created inventory report data",
                        "schema": {
                            "$ref": "#/definitions/models.InventoryReportResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property or old report not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/inventory-reports/summarize/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generate summary from photo for first inventory report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Generate summary from photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Summarize data",
                        "name": "aiData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SummarizeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Summarize data",
                        "schema": {
                            "$ref": "#/definitions/models.SummarizeResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/inventory-reports/{report_id}/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get inventory report information by its ID or get the latest one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get inventory report by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Report ID or 'latest' to get the latest one",
                        "name": "report_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inventory report data",
                        "schema": {
                            "$ref": "#/definitions/models.InventoryReportResponse"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Inventory report not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/inventory/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get property information by its ID with inventory including rooms and furnitures",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get property inventory by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property inventory data",
                        "schema": {
                            "$ref": "#/definitions/models.PropertyInventoryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/picture/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get property's picture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get property's picture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Image data",
                        "schema": {
                            "$ref": "#/definitions/models.ImageResponse"
                        }
                    },
                    "204": {
                        "description": "No picture associated"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update property's picture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Update property's picture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Picture data as a Base64 string",
                        "name": "picture",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ImageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Updated property data",
                        "schema": {
                            "$ref": "#/definitions/models.PropertyResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields or bad base64 string",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/rooms/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all rooms for a specific property",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get rooms by property ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of rooms",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.RoomResponse"
                            }
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new room for a property",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Create a new room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Room data",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoomRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created room data",
                        "schema": {
                            "$ref": "#/definitions/models.RoomResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/rooms/{room_id}/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get room information by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get room by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "room_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room data",
                        "schema": {
                            "$ref": "#/definitions/models.RoomResponse"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Room not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/rooms/{room_id}/archive": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Toggle archive status of a room by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Toggle archive room by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "room_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Archive status",
                        "name": "archive",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ArchiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Toggled archive room data",
                        "schema": {
                            "$ref": "#/definitions/models.PropertyResponse"
                        }
                    },
                    "400": {
                        "description": "Mising fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Room not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/rooms/{room_id}/furnitures/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all furnitures for a specific room",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get furnitures by room ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "room_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of furnitures",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FurnitureResponse"
                            }
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Room not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new furniture for a room",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Create a new furniture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "room_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Furniture data",
                        "name": "furniture",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FurnitureRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created furniture data",
                        "schema": {
                            "$ref": "#/definitions/models.FurnitureResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "409": {
                        "description": "Furniture already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/rooms/{room_id}/furnitures/{furniture_id}/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get furniture information by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Get furniture by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "room_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Furniture ID",
                        "name": "furniture_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Furniture data",
                        "schema": {
                            "$ref": "#/definitions/models.FurnitureResponse"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Furniture not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/rooms/{room_id}/furnitures/{furniture_id}/archive": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Toggle archive status of a furniture by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Toggle archive furniture by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "room_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Furniture ID",
                        "name": "furniture_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Archive status",
                        "name": "archive",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ArchiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Toggled archive furniture data",
                        "schema": {
                            "$ref": "#/definitions/models.PropertyResponse"
                        }
                    },
                    "400": {
                        "description": "Mising fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Furniture not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/owner/properties/{property_id}/send-invite": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Invite tenant to owner's property",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "Invite tenant to owner's property",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Property ID",
                        "name": "property_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invite params",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InviteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created invite",
                        "schema": {
                            "$ref": "#/definitions/models.InviteResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "403": {
                        "description": "Property is not yours",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "409": {
                        "description": "Invite already exists for this email",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/profile/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get current user profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get current user profile",
                "responses": {
                    "200": {
                        "description": "User data",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update current user profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update current user profile",
                "parameters": [
                    {
                        "description": "User update info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/profile/picture/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get current user's profile picture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get current user's profile picture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image data",
                        "schema": {
                            "$ref": "#/definitions/models.ImageResponse"
                        }
                    },
                    "204": {
                        "description": "No picture associated"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update current user's profile picture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update current user's profile picture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Picture data as a Base64 string",
                        "name": "picture",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ImageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Updated user data",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Missing fields or bad base64 string",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/tenant/invite/{id}/": {
            "post": {
                "description": "Answer an invite from an owner with an invite link by accepting the invite",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Accept an invite",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pending contract ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Accepted"
                    },
                    "403": {
                        "description": "Not a tenant",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "Pending contract not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "409": {
                        "description": "Property not available or tenant already has contract",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all users information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{id}/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user information by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{id}/picture/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user's picture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user's picture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image data",
                        "schema": {
                            "$ref": "#/definitions/models.ImageResponse"
                        }
                    },
                    "204": {
                        "description": "No picture associated"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "db.Role": {
            "type": "string",
            "enum": [
                "owner",
                "tenant"
            ],
            "x-enum-varnames": [
                "RoleOwner",
                "RoleTenant"
            ]
        },
        "models.ArchiveRequest": {
            "type": "object",
            "properties": {
                "archive": {
                    "type": "boolean"
                }
            }
        },
        "models.CreateInventoryReportResponse": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "pdf_data": {
                    "type": "string"
                },
                "pdf_name": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.DocumentResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.FurnitureRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "models.FurnitureResponse": {
            "type": "object",
            "properties": {
                "archived": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "room_id": {
                    "type": "string"
                }
            }
        },
        "models.FurnitureStateRequest": {
            "type": "object",
            "required": [
                "cleanliness",
                "id",
                "note",
                "pictures",
                "state"
            ],
            "properties": {
                "cleanliness": {
                    "type": "string",
                    "enum": [
                        "dirty",
                        "medium",
                        "clean"
                    ]
                },
                "id": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "pictures": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "broken",
                        "needsRepair",
                        "bad",
                        "medium",
                        "good",
                        "new"
                    ]
                }
            }
        },
        "models.FurnitureStateResponse": {
            "type": "object",
            "properties": {
                "cleanliness": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "quantity": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "models.ImageRequest": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "string"
                }
            }
        },
        "models.ImageResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "models.InventoryReportRequest": {
            "type": "object",
            "required": [
                "rooms",
                "type"
            ],
            "properties": {
                "rooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RoomStateRequest"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "start",
                        "middle",
                        "end"
                    ]
                }
            }
        },
        "models.InventoryReportResponse": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "rooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RoomStateResponse"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.InviteRequest": {
            "type": "object",
            "required": [
                "start_date",
                "tenant_email"
            ],
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "tenant_email": {
                    "type": "string"
                }
            }
        },
        "models.InviteResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "tenant_email": {
                    "type": "string"
                }
            }
        },
        "models.PropertyInventoryResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "apartment_number": {
                    "type": "string"
                },
                "archived": {
                    "type": "boolean"
                },
                "area_sqm": {
                    "type": "number"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deposit_price": {
                    "type": "number"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nb_damage": {
                    "type": "integer"
                },
                "owner_id": {
                    "type": "string"
                },
                "picture_id": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "rental_price_per_month": {
                    "type": "number"
                },
                "rooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.roomResponse"
                    }
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tenant": {
                    "type": "string"
                }
            }
        },
        "models.PropertyRequest": {
            "type": "object",
            "required": [
                "address",
                "area_sqm",
                "city",
                "country",
                "deposit_price",
                "name",
                "postal_code",
                "rental_price_per_month"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "apartment_number": {
                    "type": "string"
                },
                "area_sqm": {
                    "type": "number"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "deposit_price": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "rental_price_per_month": {
                    "type": "number"
                }
            }
        },
        "models.PropertyResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "apartment_number": {
                    "type": "string"
                },
                "archived": {
                    "type": "boolean"
                },
                "area_sqm": {
                    "type": "number"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deposit_price": {
                    "type": "number"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nb_damage": {
                    "type": "integer"
                },
                "owner_id": {
                    "type": "string"
                },
                "picture_id": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "rental_price_per_month": {
                    "type": "number"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tenant": {
                    "type": "string"
                }
            }
        },
        "models.RoomRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "models.RoomResponse": {
            "type": "object",
            "properties": {
                "archived": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "property_id": {
                    "type": "string"
                }
            }
        },
        "models.RoomStateRequest": {
            "type": "object",
            "required": [
                "cleanliness",
                "furnitures",
                "id",
                "note",
                "pictures",
                "state"
            ],
            "properties": {
                "cleanliness": {
                    "type": "string",
                    "enum": [
                        "dirty",
                        "medium",
                        "clean"
                    ]
                },
                "furnitures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FurnitureStateRequest"
                    }
                },
                "id": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "pictures": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "broken",
                        "needsRepair",
                        "bad",
                        "medium",
                        "good",
                        "new"
                    ]
                }
            }
        },
        "models.RoomStateResponse": {
            "type": "object",
            "properties": {
                "cleanliness": {
                    "type": "string"
                },
                "furnitures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FurnitureStateResponse"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "models.SummarizeRequest": {
            "type": "object",
            "required": [
                "id",
                "pictures",
                "type"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "pictures": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "room",
                        "furniture"
                    ]
                }
            }
        },
        "models.SummarizeResponse": {
            "type": "object",
            "properties": {
                "cleanliness": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "models.UserRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "profile_picture_id": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/db.Role"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                }
            }
        },
        "models.furnitureResponse": {
            "type": "object",
            "properties": {
                "archived": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "models.roomResponse": {
            "type": "object",
            "properties": {
                "archived": {
                    "type": "boolean"
                },
                "furnitures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.furnitureResponse"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "utils.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/utils.ErrorCode"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorCode": {
            "type": "string",
            "enum": [
                "invalid-password",
                "cannot-fetch-user",
                "user-not-found",
                "cannot-create-user",
                "no-claims",
                "cannot-decode-user",
                "missing-fields",
                "cannot-hash-password",
                "email-already-exists",
                "test-error",
                "too-many-requests",
                "invite-not-found",
                "user-must-have-same-email-as-invite",
                "invite-already-exists-for-email-or-property",
                "contract-already-exists-for-tenant-and-property",
                "property-not-found",
                "property-is-not-yours",
                "not-an-owner",
                "not-a-tenant",
                "user-already-exists-as-owner",
                "property-already-exists",
                "property-not-available",
                "tenant-already-has-contract",
                "no-active-contract",
                "no-pending-contract",
                "failed-to-link-image",
                "bad-base64-string",
                "property-picture-not-found",
                "user-profile-picture-not-found",
                "room-already-exists",
                "room-not-found",
                "furniture-not-found",
                "furniture-already-exists",
                "furniture-not-in-this-room",
                "inventory-report-already-exists",
                "inventory-report-not-found",
                "room-state-already-exists",
                "furniture-state-already-exists",
                "error-request-chatgpt-api",
                "failed-send-email"
            ],
            "x-enum-varnames": [
                "InvalidPassword",
                "CannotFetchUser",
                "UserNotFound",
                "CannotCreateUser",
                "NoClaims",
                "CannotDecodeUser",
                "MissingFields",
                "CannotHashPassword",
                "EmailAlreadyExists",
                "TestError",
                "TooManyRequests",
                "InviteNotFound",
                "UserSameEmailAsInvite",
                "InviteAlreadyExists",
                "ContractAlreadyExist",
                "PropertyNotFound",
                "PropertyNotYours",
                "NotAnOwner",
                "NotATenant",
                "UserAlreadyExistsAsOwner",
                "PropertyAlreadyExists",
                "PropertyNotAvailable",
                "TenantAlreadyHasContract",
                "NoActiveContract",
                "NoPendingContract",
                "FailedLinkImage",
                "BadBase64String",
                "PropertyPictureNotFound",
                "UserProfilePictureNotFound",
                "RoomAlreadyExists",
                "RoomNotFound",
                "FurnitureNotFound",
                "FurnitureAlreadyExists",
                "FurnitureNotInThisRoom",
                "InventoryReportAlreadyExists",
                "InventoryReportNotFound",
                "RoomStateAlreadyExists",
                "FurnitureStateAlreadyExists",
                "ErrorRequestChatGPTAPI",
                "FailedSendEmail"
            ]
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Enter the token with the `Bearer ` prefix, e.g. \"Bearer abcde12345\".",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}