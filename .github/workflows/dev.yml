name: Build, test and deploy on dev VM

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main

jobs:
  build-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Code/Web/
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Jest tests
        run: npm test -- --coverage

      - name: Build project
        run: npm run build

  build-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Code/Server/

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Build
        run: ./build.sh

      - name: Install linter
        run: sudo snap install golangci-lint --classic

      - name: Run linter
        run: ./run_linter.sh

      - name: Test
        id: test
        run: |
          OUTPUT=$(./run_tests.sh no-interactive)
          echo "# Coverage report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`txt" >> $GITHUB_STEP_SUMMARY
          echo "$OUTPUT" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "COVERAGE=$(echo "$OUTPUT" | grep total | grep -o '[0-9]\+\(\.[0-9]\+\)\?' | cut -d. -f1)" >> "$GITHUB_OUTPUT"

      - name: Check coverage requirements
        run: |
          COVERAGE=${{ steps.test.outputs.COVERAGE }}
          if [ "$COVERAGE" -lt 80 ]; then
            echo "The unit test coverage must me greater than 80%"
            exit 1
          fi

  # test-build-android:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-java@v4
  #       with:
  #         distribution: "zulu"
  #         java-version: 21

  #     - uses: gradle/actions/setup-gradle@v4

  #     - name: Test
  #       run: ./gradlew build --stacktrace

  build-android:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 30
          - 32
          - 34

    steps:
      - uses: actions/checkout@v4

      - name: Get AVD info
        uses: ./.github/actions/get-avd-info
        id: avd-info
        with:
          api-level: ${{ matrix.api-level }}

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 21

      - uses: gradle/actions/setup-gradle@v4

      - name: Cache gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ steps.avd-info.outputs.arch }}
          target: ${{ steps.avd-info.outputs.target }}
          profile: "pixel_6"
          script: mv .github/debug.keystore ~/.android; cd Code/Mobile_Android ; ./gradlew connectedDebugAndroidTest

  deploy-dev:
    name: Deploy on dev VM
    runs-on: ubuntu-latest
    needs: [build-web, build-server]
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_SERVER_DEV }}
          username: ${{ vars.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: cd /home/${{ vars.DEPLOY_USER }}/Immotep/Code/ && git switch dev && git pull && docker compose down && docker compose up --build -d
