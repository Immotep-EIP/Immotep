name: check-build

on:
  workflow_call:
  push:
    branches:
      - build

jobs:
  build-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Code/Web/
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Jest tests
        run: npm test -- --coverage

      - name: Build project
        run: npm run build

  build-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Code/Server/

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Build
        run: make build

      - name: Install linter
        run: sudo snap install golangci-lint --classic

      - name: Run linter
        run: make lint

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Test
        id: test
        run: |
          OUTPUT=$(make test)
          echo "# Test and coverage report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`txt" >> $GITHUB_STEP_SUMMARY
          echo "$OUTPUT" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "COVERAGE=$(echo "$OUTPUT" | grep "Coverage: " | grep -o '[0-9]\+\(\.[0-9]\+\)\?' | cut -d. -f1)" >> "$GITHUB_OUTPUT"
          echo "$OUTPUT"

      - name: Check coverage requirements
        run: |
          COVERAGE=${{ steps.test.outputs.COVERAGE }}
          if [ "$COVERAGE" -lt 80 ]; then
            echo "The unit test coverage must me greater than 80% but got $COVERAGE%"
            exit 1
          fi

  # test-build-android:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-java@v4
  #       with:
  #         distribution: "zulu"
  #         java-version: 21

  #     - uses: gradle/actions/setup-gradle@v4

  #     - name: Test
  #       run: ./gradlew build --stacktrace

  # build-android:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       api-level:
  #         - 30
  #         - 32
  #         - 34

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Get AVD info
  #       uses: ./.github/actions/get-avd-info
  #       id: avd-info
  #       with:
  #         api-level: ${{ matrix.api-level }}

  #     - name: Enable KVM group perms
  #       run: |
  #         echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
  #         sudo udevadm control --reload-rules
  #         sudo udevadm trigger --name-match=kvm

  #     - uses: actions/setup-java@v4
  #       with:
  #         distribution: "zulu"
  #         java-version: 21

  #     - uses: gradle/actions/setup-gradle@v4

  #     - name: Cache gradle
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.gradle/caches
  #         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
  #         restore-keys: |
  #           ${{ runner.os }}-gradle-

  #     - name: Instrumentation tests
  #       uses: reactivecircus/android-emulator-runner@v2
  #       with:
  #         api-level: ${{ matrix.api-level }}
  #         arch: ${{ steps.avd-info.outputs.arch }}
  #         target: ${{ steps.avd-info.outputs.target }}
  #         profile: "pixel_6"
  #         script: mv .github/debug.keystore ~/.android; cd Code/Mobile_Android ; ./gradlew connectedDebugAndroidTest
